// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var claimLine, Download, freeLine, linesInUse, linesUsed, parseHashes, progress;
  Download = require('download');
  progress = require('download-status');
  linesUsed = [];
  parseHashes = function (rawHash) {
    var hashes, parse;
    parse = function (result, hash) {
      var key, parts, value;
      parts = hash.trim().split('=');
      key = parts[0];
      value = parts.splice(1).join('=');
      result[key] = value;
      return result;
    };
    hashes = rawHash.split(',');
    return hashes.reduce(parse, {});
  };
  claimLine = function () {
    var line;
    line = 0;
    while (null != linesUsed[line]) {
      line++;
    }
    linesUsed[line] = true;
    return line;
  };
  linesInUse = function () {
    var line, lines;
    lines = 0;
    for (var i$ = 0, length$ = linesUsed.length; i$ < length$; ++i$) {
      line = linesUsed[i$];
      if (!('undefined' !== typeof line && null != line))
        continue;
      lines++;
    }
    return lines;
  };
  freeLine = function (line) {
    return delete linesUsed[line];
  };
  module.exports = function (url, destinationDir, fileName, callback) {
    var download, fileOptions, hash, lineNum;
    hash = null;
    lineNum = claimLine();
    if (lineNum === linesUsed.length - 1)
      process.stderr.write('\n');
    fileOptions = {
      url: url,
      name: fileName
    };
    download = new Download({ clear: false }).get(fileOptions, destinationDir);
    download.use(function (response, file, next) {
      var rawHash;
      response.on('data', function (data) {
        var out;
        out = process.stderr;
        out.moveCursor(0, out.rows - 1);
        return out.moveCursor(0, -lineNum);
      });
      rawHash = response.headers['x-goog-hash'];
      hash = parseHashes(rawHash).md5;
      return next();
    });
    download.use(progress());
    return download.run(function (err, files) {
      freeLine(lineNum);
      if (null != err)
        callback(err);
      return callback(null, hash);
    });
  };
}.call(this);
